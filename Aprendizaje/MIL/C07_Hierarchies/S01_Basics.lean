import Aprendizaje.MIL.Common
import Mathlib.Algebra.BigOperators.Ring
import Mathlib.Data.Real.Basic

set_option autoImplicit true


class One‚ÇÅ (Œ± : Type) where
  /-- The element one -/
  one : Œ±


#check One‚ÇÅ.one -- One‚ÇÅ.one {Œ± : Type} [self : One‚ÇÅ Œ±] : Œ±

@[class] structure One‚ÇÇ (Œ± : Type) where
  /-- The element one -/
  one : Œ±

#check One‚ÇÇ.one


example (Œ± : Type) [One‚ÇÅ Œ±] : Œ± := One‚ÇÅ.one

example (Œ± : Type) [One‚ÇÅ Œ±] := (One‚ÇÅ.one : Œ±)

@[inherit_doc]
notation "ùüô" => One‚ÇÅ.one

example {Œ± : Type} [One‚ÇÅ Œ±] : Œ± := ùüô

example {Œ± : Type} [One‚ÇÅ Œ±] : (One‚ÇÅ.one : Œ±) = ùüô := rfl


class Dia‚ÇÅ (Œ± : Type) where
  dia : Œ± ‚Üí Œ± ‚Üí Œ±

infixl:70 " ‚ãÑ " => Dia‚ÇÅ.dia


class Semigroup‚ÇÅ (Œ± : Type) where
  toDia‚ÇÅ : Dia‚ÇÅ Œ±
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

/- Al crear la clase de esta forma, "toDia‚ÇÅ" no se a√±ade a la base de datos de los "instances" y hay
   que a√±adirlo a mano para poder utilizar la notaci√≥n con el "‚ãÑ" -/

attribute [instance] Semigroup‚ÇÅ.toDia‚ÇÅ

example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

class Semigroup‚ÇÇ (Œ± : Type) extends Dia‚ÇÅ Œ± where
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

example {Œ± : Type} [Semigroup‚ÇÇ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

class DiaOneClass‚ÇÅ (Œ± : Type) extends One‚ÇÅ Œ±, Dia‚ÇÅ Œ± where
  /-- One is a left neutral element for diamond. -/
  one_dia : ‚àÄ a : Œ±, ùüô ‚ãÑ a = a
  /-- One is a right neutral element for diamond -/
  dia_one : ‚àÄ a : Œ±, a ‚ãÑ ùüô = a



set_option trace.Meta.synthInstance true in
example {Œ± : Type} [DiaOneClass‚ÇÅ Œ±] (a b : Œ±) : Prop := a ‚ãÑ b = ùüô


class Monoid‚ÇÅ (Œ± : Type) extends Semigroup‚ÇÅ Œ±, DiaOneClass‚ÇÅ Œ±


class Monoid‚ÇÇ (Œ± : Type) where
  toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±
  toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±


example {Œ± : Type} [Monoid‚ÇÅ Œ±] :
  (Monoid‚ÇÅ.toSemigroup‚ÇÅ.toDia‚ÇÅ.dia : Œ± ‚Üí Œ± ‚Üí Œ±) = Monoid‚ÇÅ.toDiaOneClass‚ÇÅ.toDia‚ÇÅ.dia := rfl


/- Monoid‚ÇÇ.mk {Œ± : Type} (toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±) (toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±) : Monoid‚ÇÇ Œ± -/
#check Monoid‚ÇÇ.mk

/- Monoid‚ÇÅ.mk {Œ± : Type} [toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±] [toOne‚ÇÅ : One‚ÇÅ Œ±] (one_dia : ‚àÄ (a : Œ±), ùüô ‚ãÑ a = a) (dia_one : ‚àÄ (a : Œ±), a ‚ãÑ ùüô = a) : Monoid‚ÇÅ Œ± -/
#check Monoid‚ÇÅ.mk


#check Monoid‚ÇÅ.toSemigroup‚ÇÅ
#check Monoid‚ÇÅ.toDiaOneClass‚ÇÅ

/- MIO -/

class Monoid‚Çâ‚Çá‚Çà (Œ± : Type) extends Semigroup‚ÇÇ Œ±, DiaOneClass‚ÇÅ Œ±

example {Œ± : Type} [Monoid‚Çâ‚Çá‚Çà Œ±] :
  (Monoid‚Çâ‚Çá‚Çà.toSemigroup‚ÇÇ.toDia‚ÇÅ.dia : Œ± ‚Üí Œ± ‚Üí Œ±) = Monoid‚Çâ‚Çá‚Çà.toDiaOneClass‚ÇÅ.toDia‚ÇÅ.dia := rfl

#check Monoid‚Çâ‚Çá‚Çà.mk
#print Monoid‚Çâ‚Çá‚Çà

/- Para Monoid‚ÇÇ si aparacen dos operaciones "dia" distintas, la que proviene de Semigroup‚ÇÅ y
   la de DiaOneClass‚ÇÅ. Sin embargo Monoid‚ÇÇ (y Monoid‚Çâ‚Çá‚Çà), no toma DiaOneClass‚ÇÅ, sino que toma solo la
   parte con la que no hay "overlapping". A√∫n as√≠, aunque no aparezca como un "field", si que incluye
   la "instance" Monoid‚ÇÅ.toDiaOneClass‚ÇÅ

   Por tanto, el siguiente ejemplo dar√° error

example {Œ± : Type} [Monoid‚ÇÇ Œ±] :
  (Monoid‚ÇÇ.toSemigroup‚ÇÅ.toDia‚ÇÅ.dia : Œ± ‚Üí Œ± ‚Üí Œ±) = Monoid‚ÇÇ.toDiaOneClass‚ÇÅ.toDia‚ÇÅ.dia := rfl
-/
/-  -/

class Inv‚ÇÅ (Œ± : Type) where
  /-- The inversion function -/
  inv : Œ± ‚Üí Œ±

@[inherit_doc]
postfix:max "‚Åª¬π" => Inv‚ÇÅ.inv

class Group‚ÇÅ (G : Type) extends Monoid‚ÇÅ G, Inv‚ÇÅ G where
  inv_dia : ‚àÄ a : G, a‚Åª¬π ‚ãÑ a = ùüô

#print Group‚ÇÅ


lemma left_inv_eq_right_inv‚ÇÅ {M : Type} [Monoid‚ÇÅ M] {a b c : M} (hba : b ‚ãÑ a = ùüô) (hac : a ‚ãÑ c = ùüô) : b = c := by
  rw [‚Üê Monoid‚ÇÅ.one_dia c, ‚Üê hba, Semigroup‚ÇÅ.dia_assoc, hac, DiaOneClass‚ÇÅ.dia_one b]


export DiaOneClass‚ÇÅ (one_dia dia_one)
export Semigroup‚ÇÅ (dia_assoc)
export Group‚ÇÅ (inv_dia)

example {M : Type} [Monoid‚ÇÅ M] {a b c : M} (hba : b ‚ãÑ a = ùüô) (hac : a ‚ãÑ c = ùüô) : b = c := by
  rw [‚Üê one_dia c, ‚Üê hba, dia_assoc, hac, dia_one b]


lemma inv_eq_of_dia [Group‚ÇÅ G] {a b : G} (h : a ‚ãÑ b = ùüô) : a‚Åª¬π = b := by
  rw [‚Üê dia_one (a‚Åª¬π), ‚Üê h, ‚Üê dia_assoc, inv_dia, one_dia]

lemma dia_inv [Group‚ÇÅ G] (a : G) : a ‚ãÑ a‚Åª¬π = ùüô := by
  rw [‚Üê inv_dia (a‚Åª¬π), inv_eq_of_dia (inv_dia a)]





class AddSemigroup‚ÇÉ (Œ± : Type) extends Add Œ± where
/-- Addition is associative -/
  add_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a + b + c = a + (b + c)

@[to_additive AddSemigroup‚ÇÉ]
class Semigroup‚ÇÉ (Œ± : Type) extends Mul Œ± where
/-- Multiplication is associative -/
  mul_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a * b * c = a * (b * c)

class AddMonoid‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ±, AddZeroClass Œ±

@[to_additive AddMonoid‚ÇÉ]
class Monoid‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ±, MulOneClass Œ±

#print MulOneClass
#print Monoid‚ÇÉ

-- A√±ade el atributo "to_additive" a "Monoid‚ÇÉ.toMulOneClass" (creo)
attribute [to_additive existing] Monoid‚ÇÉ.toMulOneClass

export Semigroup‚ÇÉ (mul_assoc‚ÇÉ)
export AddSemigroup‚ÇÉ (add_assoc‚ÇÉ)

whatsnew in
@[to_additive]
lemma left_inv_eq_right_inv' {M : Type} [Monoid‚ÇÉ M] {a b c : M} (hba : b * a = 1) (hac : a * c = 1) : b = c := by
  rw [‚Üê one_mul c, ‚Üê hba, mul_assoc‚ÇÉ, hac, mul_one b]

#check left_neg_eq_right_neg'

class AddCommSemigroup‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ± where
  add_comm : ‚àÄ a b : Œ±, a + b = b + a

@[to_additive AddCommSemigroup‚ÇÉ]
class CommSemigroup‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ± where
  mul_comm : ‚àÄ a b : Œ±, a * b = b * a

class AddCommMonoid‚ÇÉ (Œ± : Type) extends AddMonoid‚ÇÉ Œ±, AddCommSemigroup‚ÇÉ Œ±

@[to_additive AddCommMonoid‚ÇÉ]
class CommMonoid‚ÇÉ (Œ± : Type) extends Monoid‚ÇÉ Œ±, CommSemigroup‚ÇÉ Œ±

class AddGroup‚ÇÉ (G : Type) extends AddMonoid‚ÇÉ G, Neg G where
  neg_add : ‚àÄ a : G, -a + a = 0

@[to_additive AddGroup‚ÇÉ]
class Group‚ÇÉ (G : Type) extends Monoid‚ÇÉ G, Inv G where
  inv_mul : ‚àÄ a : G, a‚Åª¬π * a = 1

-- A√±ade los lemas al simplificador
attribute [simp] Group‚ÇÉ.inv_mul AddGroup‚ÇÉ.neg_add



@[to_additive]
lemma inv_eq_of_mul [Group‚ÇÉ G] {a b : G} (h : a * b = 1) : a‚Åª¬π = b := by
  rw [‚Üê mul_one (a‚Åª¬π), ‚Üê h, ‚Üê mul_assoc‚ÇÉ, Group‚ÇÉ.inv_mul, one_mul]


@[to_additive (attr := simp)]
lemma Group‚ÇÉ.mul_inv {G : Type} [Group‚ÇÉ G] {a : G} : a * a‚Åª¬π = 1 := by
  rw [‚Üê inv_mul (a‚Åª¬π), inv_eq_of_mul (inv_mul a)]

@[to_additive]
lemma mul_left_cancel‚ÇÉ {G : Type} [Group‚ÇÉ G] {a b c : G} (h : a * b = a * c) : b = c := by
  rw [‚Üê one_mul b, ‚Üê Group‚ÇÉ.inv_mul a, mul_assoc‚ÇÉ, h, ‚Üê mul_assoc‚ÇÉ, Group‚ÇÉ.inv_mul a, one_mul]

@[to_additive]
lemma mul_right_cancel‚ÇÉ {G : Type} [Group‚ÇÉ G] {a b c : G} (h : b*a = c*a) : b = c := by
  simpa [mul_assoc‚ÇÉ] using congr_arg (¬∑ * a‚Åª¬π) h

class AddCommGroup‚ÇÉ (G : Type) extends AddGroup‚ÇÉ G, AddCommMonoid‚ÇÉ G

@[to_additive AddCommGroup‚ÇÉ]
class CommGroup‚ÇÉ (G : Type) extends Group‚ÇÉ G, CommMonoid‚ÇÉ G



class Ring‚ÇÉ (R : Type) extends AddGroup‚ÇÉ R, Monoid‚ÇÉ R, MulZeroClass R where
  /-- Multiplication is left distributive over addition -/
  left_distrib : ‚àÄ a b c : R, a * (b + c) = a * b + a * c
  /-- Multiplication is right distributive over addition -/
  right_distrib : ‚àÄ a b c : R, (a + b) * c = a * c + b * c

#print Ring‚ÇÉ
#print AddCommGroup‚ÇÉ

export AddCommGroup‚ÇÉ (add_comm)

/- El siguiente ejemplo da error

example {R : Type} [Ring‚ÇÉ R] (a b: R) : a + b = b + a := add_comm a b

   Sin embargo, a continuaci√≥n veremos que un anillo es un ejemplo de grupo conmutativo y dejar√° de dar error
-/

instance {R : Type} [Ring‚ÇÉ R] : AddCommGroup‚ÇÉ R :=
{ Ring‚ÇÉ.toAddGroup‚ÇÉ with
  add_comm := by
    intro a b
    have : a + (a + b + b) = a + (b + a + b) := by
      calc
        a + (a + b + b) = (a + a) + (b + b) := by rw [add_assoc‚ÇÉ, add_assoc‚ÇÉ]
        _ = (1 * a + 1 * a) + (1 * b + 1 * b) := by simp
        _ = (1 + 1) * a + (1 + 1) * b := by simp [Ring‚ÇÉ.right_distrib]
        _ = (1 + 1) * (a + b) := by simp [Ring‚ÇÉ.left_distrib]
        _ = 1 * (a + b) + 1 * (a + b) := by simp [Ring‚ÇÉ.right_distrib]
        _ = (a + b) + (a + b) := by simp
        _ = a + (b + a + b) := by simp [add_assoc‚ÇÉ]
    exact add_right_cancel‚ÇÉ (add_left_cancel‚ÇÉ this) }

/- Otra forma que me gusta m√°s

instance {R : Type} [Ring‚ÇÉ R] : AddCommGroup‚ÇÉ R where
  add_comm := by
    intro a b
    have : a + (a + b + b) = a + (b + a + b) := by
      calc
        a + (a + b + b) = (a + a) + (b + b) := by rw [add_assoc‚ÇÉ, add_assoc‚ÇÉ]
        _ = (1 * a + 1 * a) + (1 * b + 1 * b) := by simp
        _ = (1 + 1) * a + (1 + 1) * b := by simp [Ring‚ÇÉ.right_distrib]
        _ = (1 + 1) * (a + b) := by simp [Ring‚ÇÉ.left_distrib]
        _ = 1 * (a + b) + 1 * (a + b) := by simp [Ring‚ÇÉ.right_distrib]
        _ = (a + b) + (a + b) := by simp
        _ = a + (b + a + b) := by simp [add_assoc‚ÇÉ]
    exact add_right_cancel‚ÇÉ (add_left_cancel‚ÇÉ this)
    -/

/- Mio -/
example {R : Type} [Ring‚ÇÉ R] (a b: R) : a + b = b + a := add_comm a b
/-  -/


instance : Ring‚ÇÉ ‚Ñ§ where
  add := (¬∑ + ¬∑)
  add_assoc‚ÇÉ := add_assoc
  zero := 0
  zero_add := by simp
  add_zero := by simp
  neg := (- ¬∑)
  neg_add := by simp
  mul := (¬∑ * ¬∑)
  mul_assoc‚ÇÉ := mul_assoc
  one := 1
  one_mul := by simp
  mul_one := by simp
  zero_mul := by simp
  mul_zero := by simp
  left_distrib := Int.mul_add
  right_distrib := Int.add_mul

class LE‚ÇÅ (Œ± : Type) where
  /-- The Less-or-Equal relation. -/
  le : Œ± ‚Üí Œ± ‚Üí Prop

@[inherit_doc] infix:50 " ‚â§‚ÇÅ " => LE‚ÇÅ.le

class Preorder‚ÇÅ (Œ± : Type) extends LE‚ÇÅ Œ± where
/-- Order relation is reflexive -/
  le_refl : ‚àÄ (a : Œ±), a ‚â§‚ÇÅ a
/-- Order relation is transitive -/
  le_trans : ‚àÄ (a b c : Œ±), a ‚â§‚ÇÅ b ‚Üí b ‚â§‚ÇÅ c ‚Üí a ‚â§‚ÇÅ c

class PartialOrder‚ÇÅ (Œ± : Type) extends Preorder‚ÇÅ Œ± where
/-- Order relation is transitive -/
  le_antisymm : ‚àÄ (a b : Œ±), a ‚â§‚ÇÅ b ‚Üí b ‚â§‚ÇÅ a ‚Üí a = b

class OrderedCommMonoid‚ÇÅ (Œ± : Type) extends PartialOrder‚ÇÅ Œ±, CommMonoid‚ÇÉ Œ± where
  mul_of_le : ‚àÄ (a b : Œ±), a ‚â§‚ÇÅ b ‚Üí ‚àÄ (c : Œ±), c * a ‚â§‚ÇÅ c * b

instance : OrderedCommMonoid‚ÇÅ ‚Ñï where
  le := (¬∑ ‚â§ ¬∑)
  le_refl := le_refl
  le_trans := fun a b c ‚Ü¶ le_trans
  le_antisymm := fun a b ‚Ü¶ le_antisymm
  mul_assoc‚ÇÉ := mul_assoc
  one := 1
  one_mul := one_mul
  mul_one := mul_one
  mul_comm := mul_comm
  mul_of_le := by
    intro a b h c
    apply Nat.mul_le_mul_left c h


class SMul‚ÇÉ (Œ± : Type) (Œ≤ : Type) where
  /-- Scalar multiplication -/
  smul : Œ± ‚Üí Œ≤ ‚Üí Œ≤

infixr:73 " ‚Ä¢ " => SMul‚ÇÉ.smul

class Module‚ÇÅ (R : Type) [Ring‚ÇÉ R] (M : Type) [AddCommGroup‚ÇÉ M] extends SMul‚ÇÉ R M where
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0
  one_smul : ‚àÄ m : M, (1 : R) ‚Ä¢ m = m
  mul_smul : ‚àÄ (a b : R) (m : M), (a * b) ‚Ä¢ m = a ‚Ä¢ b ‚Ä¢ m
  add_smul : ‚àÄ (a b : R) (m : M), (a + b) ‚Ä¢ m = a ‚Ä¢ m + b ‚Ä¢ m
  smul_add : ‚àÄ (a : R) (m n : M), a ‚Ä¢ (m + n) = a ‚Ä¢ m + a ‚Ä¢ n

/- MIO -/

example (R : Type) [Ring‚ÇÉ R] (M : Type) [AddCommGroup‚ÇÉ M] [Module‚ÇÅ R M] (a b : M) (r : R) :
  (a + b = b + a) ‚àß (r ‚Ä¢ (a + b) = r ‚Ä¢ a + r ‚Ä¢ b) := by
    constructor
    ¬∑ exact AddCommGroup‚ÇÉ.add_comm  a b
    ¬∑ exact Module‚ÇÅ.smul_add r a b

/-  -/

instance selfModule (R : Type) [Ring‚ÇÉ R] : Module‚ÇÅ R R where
  smul := (¬∑ * ¬∑) -- fun r s ‚Ü¶ r*s
  zero_smul := zero_mul
  one_smul := one_mul
  mul_smul := mul_assoc‚ÇÉ
  add_smul := Ring‚ÇÉ.right_distrib
  smul_add := Ring‚ÇÉ.left_distrib

def nsmul‚ÇÅ [Zero M] [Add M] : ‚Ñï ‚Üí M ‚Üí M
  | 0, _ => 0
  | n + 1, a => a + nsmul‚ÇÅ n a

def zsmul‚ÇÅ {M : Type*} [Zero M] [Add M] [Neg M] : ‚Ñ§ ‚Üí M ‚Üí M
  | Int.ofNat n, a => nsmul‚ÇÅ n a -- Se define para los enteros no negativos
  | Int.negSucc n, a => -nsmul‚ÇÅ n.succ a -- Se define para los enteros negativos considerados como -(n+1) con n natural

#check Int.toNat_of_nonneg
#check Nat.add_comm

lemma nsmul‚ÇÅ_eq_zsmul‚ÇÅ [Zero M] [Add M] [Neg M] (n: ‚Ñ§) (h: 0 ‚â§ n) : ‚àÄ (m : M), nsmul‚ÇÅ (Int.toNat n) m = zsmul‚ÇÅ n m := by
  intro m
  rw [‚Üê Int.toNat_of_nonneg h]
  dsimp [zsmul‚ÇÅ]

---------- Terminar

#print AddSemigroup‚ÇÉ

lemma nsmul‚ÇÅ_of_add_eq_add_of_nsmul‚ÇÅ [AddCommGroup‚ÇÉ M] (a b : ‚Ñï) (m : M) :
  nsmul‚ÇÅ (a + b) m = nsmul‚ÇÅ a m + nsmul‚ÇÅ b m := by
  induction' a with a ih
  ¬∑ rw [zero_add, nsmul‚ÇÅ, zero_add]
  ¬∑ rw [add_assoc, Nat.add_comm 1 b, ‚Üê add_assoc, nsmul‚ÇÅ, nsmul‚ÇÅ, ih, ‚Üê add_assoc‚ÇÉ]

lemma nsmul‚ÇÅ_of_mul_eq_nsmul‚ÇÅ_of_nsmul‚ÇÅ [AddCommGroup‚ÇÉ M] (a b : ‚Ñï) (m : M) :
  nsmul‚ÇÅ (a * b) m = nsmul‚ÇÅ a (nsmul‚ÇÅ b m) := by
  induction' a with a ih
  ¬∑ rw [zero_mul, nsmul‚ÇÅ, nsmul‚ÇÅ]
  ¬∑ rw [add_mul, one_mul, Nat.add_comm]
    dsimp [nsmul‚ÇÅ]
    rw [‚Üê ih, nsmul‚ÇÅ_of_add_eq_add_of_nsmul‚ÇÅ]

lemma zsmul‚ÇÅ_of_mul_eq_zsmul‚ÇÅ_of_zsmul‚ÇÅ [AddCommGroup‚ÇÉ M] (a b : ‚Ñ§) (m : M) :
  zsmul‚ÇÅ (a * b) m = zsmul‚ÇÅ a (zsmul‚ÇÅ b m) := by
  induction' a with a a
  ¬∑ induction' b with b b
    dsimp
    ¬∑ rw [‚Üê Int.ofNat_mul a b]
      dsimp [zsmul‚ÇÅ]
      apply nsmul‚ÇÅ_of_mul_eq_nsmul‚ÇÅ_of_nsmul‚ÇÅ
    ¬∑ sorry
  sorry



----------------------------------------------------------

instance abGrpModule (A : Type) [AddCommGroup‚ÇÉ A] : Module‚ÇÅ ‚Ñ§ A where
  smul := zsmul‚ÇÅ
  zero_smul := by
    intro m
    dsimp
    rfl
  one_smul := by
    intro m
    dsimp
    rw [‚Üê nsmul‚ÇÅ_eq_zsmul‚ÇÅ 1 (zero_le_one) m]
    simp
    rw [nsmul‚ÇÅ, nsmul‚ÇÅ, add_zero]
  mul_smul := by
    intro a b m
    dsimp
    apply zsmul‚ÇÅ_of_mul_eq_zsmul‚ÇÅ_of_zsmul‚ÇÅ
  add_smul := sorry
  smul_add := sorry

#synth Module‚ÇÅ ‚Ñ§ ‚Ñ§ -- abGrpModule ‚Ñ§


class AddMonoid‚ÇÑ (M : Type) extends AddSemigroup‚ÇÉ M, AddZeroClass M where
  /-- Multiplication by a natural number. -/
  nsmul : ‚Ñï ‚Üí M ‚Üí M := nsmul‚ÇÅ
  /-- Multiplication by `(0 : ‚Ñï)` gives `0`. -/
  nsmul_zero : ‚àÄ x, nsmul 0 x = 0 := by intros; rfl
  /-- Multiplication by `(n + 1 : ‚Ñï)` behaves as expected. -/
  nsmul_succ : ‚àÄ (n : ‚Ñï) (x), nsmul (n + 1) x = x + nsmul n x := by intros; rfl

instance mySMul {M : Type} [AddMonoid‚ÇÑ M] : SMul ‚Ñï M := ‚ü®AddMonoid‚ÇÑ.nsmul‚ü©

instance (M N : Type) [AddMonoid‚ÇÑ M] [AddMonoid‚ÇÑ N] : AddMonoid‚ÇÑ (M √ó N) where
  add := fun p q ‚Ü¶ (p.1 + q.1, p.2 + q.2)
  add_assoc‚ÇÉ := fun a b c ‚Ü¶ by ext <;> apply add_assoc‚ÇÉ
  zero := (0, 0)
  zero_add := fun a ‚Ü¶ by ext <;> apply zero_add
  add_zero := fun a ‚Ü¶ by ext <;> apply add_zero

#check Int.ofNat_add

instance : AddMonoid‚ÇÑ ‚Ñ§ where
  add := (¬∑ + ¬∑)
  add_assoc‚ÇÉ := Int.add_assoc
  zero := 0
  zero_add := Int.zero_add
  add_zero := Int.add_zero
  nsmul := fun n m ‚Ü¶ (n : ‚Ñ§) * m
  nsmul_zero := Int.zero_mul
  nsmul_succ := by
    intro n m
    show (n + 1 : ‚Ñ§) * m = m + n * m
    rw [Int.add_mul, Int.add_comm, Int.one_mul]
  --nsmul_succ := fun n m ‚Ü¶ show (n + 1 : ‚Ñ§) * m = m + n * m
  --  by rw [Int.add_mul, Int.add_comm, Int.one_mul]

example (n : ‚Ñï) (m : ‚Ñ§) : SMul.smul (self := mySMul) n m = n * m := rfl
-- El "self" es para indicar que "instance" de SMul se va a utilizar

/- Menor estricto -/

class LT‚ÇÅ (Œ± : Type) where
  /-- The Less-Than relation -/
  lt : Œ± ‚Üí Œ± ‚Üí Prop

@[inherit_doc] infix:50 " <‚ÇÅ " => LT‚ÇÅ.lt

class Preorder‚ÇÇ (Œ± : Type) extends LE‚ÇÅ Œ±, LT‚ÇÅ Œ±  where
/-- Order relation is reflexive -/
  le_refl : ‚àÄ (a : Œ±), a ‚â§‚ÇÅ a
/-- Order relation is transitive -/
  le_trans : ‚àÄ (a b c : Œ±), a ‚â§‚ÇÅ b ‚Üí b ‚â§‚ÇÅ c ‚Üí a ‚â§‚ÇÅ c
/-- Relaci√≥n estricta de orden -/
  lt := fun a b ‚Ü¶ a ‚â§‚ÇÅ b ‚àß a ‚â† b
/-- Relaci√≥n entre definiciones -/
  lt_iff_le_not_le : ‚àÄ (a b : Œ±), a <‚ÇÅ b ‚Üî a ‚â§‚ÇÅ b ‚àß a ‚â† b := by intros; rfl

class PartialOrder‚ÇÇ (Œ± : Type) extends Preorder‚ÇÇ Œ± where
/-- Order relation is transitive -/
  le_antisymm : ‚àÄ (a b : Œ±), a ‚â§‚ÇÅ b ‚Üí b ‚â§‚ÇÅ a ‚Üí a = b

class OrderedCommMonoid‚ÇÇ (Œ± : Type) extends PartialOrder‚ÇÇ Œ±, CommMonoid‚ÇÉ Œ± where
  mul_of_le : ‚àÄ (a b : Œ±), a ‚â§‚ÇÅ b ‚Üí ‚àÄ (c : Œ±), c * a ‚â§‚ÇÅ c * b

instance : OrderedCommMonoid‚ÇÇ ‚Ñï where
  le := (¬∑ ‚â§ ¬∑)
  le_refl := le_refl
  le_trans := fun a b c ‚Ü¶ le_trans
  le_antisymm := fun a b ‚Ü¶ le_antisymm
  mul_assoc‚ÇÉ := mul_assoc
  one := 1
  one_mul := one_mul
  mul_one := mul_one
  mul_comm := mul_comm
  mul_of_le := by
    intro a b h c
    apply Nat.mul_le_mul_left c h

example : 2 <‚ÇÅ 3 := by
  rw [Preorder‚ÇÇ.lt_iff_le_not_le]
  constructor
  ¬∑ dsimp [LE‚ÇÅ.le]
    linarith
  ¬∑ norm_num
